service: myserverlessproject
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-3
  profile: serverlessUser
  environment:
    tableName: ${self:custom.tableName}
  iamRoleStatements:
    - Effect: Allow
      Action:
            - dynamodb:*
      Resource: '*'
#For http API
  httpApi:
    cors: true

plugins:
#TODO: Webpack no funciona bien con sls offline por algun motivo. Mirar esto.
  # - serverless-webpack 
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-s3-sync
  - serverless-plugin-scripts

package:
  individually: true

custom:
  s3Sync:
    - bucketName: demobucketserverlessrollerf
      localDir: UploadData
  tableName: player-points
  dynamodb: 
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      #TODO: definir ficheros para rellenar las tablas con valores por defecto
      seed: true
    migration: 
      dir: offline/migrations
  scripts:
    hooks:
      'aws:common:validate:validate': tableName=player-points-table npx jest
functions:
  getUser:
    handler: lambdas/endpoints/getUser.handler
    events:
      - httpApi:
          method: GET
          path: /get-user/{ID}

  getPlayerScore:
    handler: lambdas/endpoints/getPlayerScore.handler
    events:
      - httpApi:
          method: GET
          path: /get-player-score/{ID}
  createPlayerScore:
    handler: lambdas/endpoints/createPlayerScore.handler
    events:
      - httpApi:
          method: POST
          path: /create-player-score/{ID}

# you can add CloudFormation resource templates here
resources:
  Resources:
    DemoBucketUpload:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: demobucketserverlessrollerf
    MyDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        BillingMode: PAY_PER_REQUEST
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
